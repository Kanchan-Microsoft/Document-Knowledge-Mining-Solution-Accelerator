name: Deploy-Test-Cleanup Pipeline
on:
  push:
    branches:
      - main # Adjust this to the branch you want to trigger the deployment on
      - dev
      - demo
      - deploy-and-test
  schedule:
    - cron: "0 10,22 * * *" # Runs at 10:00 AM and 10:00 PM GMT

env:
  GPT_CAPACITY: 250
  TEXT_EMBEDDING_CAPACITY: 200

jobs:
  deploy:
    runs-on: windows-2022 # Use a Windows runner for PowerShell scripts
    outputs:
      RESOURCE_GROUP_NAME: ${{ steps.get_webapp_url.outputs.RESOURCE_GROUP_NAME }}
      KUBERNETES_RESOURCE_GROUP_NAME: ${{ steps.get_webapp_url.outputs.KUBERNETES_RESOURCE_GROUP_NAME }}
      SOLUTION_PREFIX: ${{ steps.get_webapp_url.outputs.SOLUTION_PREFIX }}
      WEBAPP_URL: ${{ steps.get_webapp_url.outputs.WEBAPP_URL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Checks out your repository
        # Install Azure CLI
      - name: Install Azure CLI
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
          Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet' -Wait

      # Install kubectl (Windows method)
      # - name: Install kubectl
      #   shell: pwsh
      #   run: |
      #     Invoke-WebRequest -Uri https://dl.k8s.io/release/v1.28.0/bin/windows/amd64/kubectl.exe -OutFile kubectl.exe
      #     Move-Item -Path ./kubectl.exe -Destination "C:\kubectl.exe"
      #     [Environment]::SetEnvironmentVariable('PATH', $env:PATH + ';C:\', [System.EnvironmentVariableTarget]::Machine)

      - name: Install kubectl
        shell: pwsh
        run: |
          az aks install-cli
          az extension add --name aks-preview

      # Install Helm (Windows method)
      - name: Install Helm
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://get.helm.sh/helm-v3.13.0-windows-amd64.zip -OutFile helm.zip
          Expand-Archive helm.zip -DestinationPath helm
          Move-Item -Path ./helm/windows-amd64/helm.exe -Destination "C:\helm.exe"
          [Environment]::SetEnvironmentVariable('PATH', $env:PATH + ';C:\', [System.EnvironmentVariableTarget]::Machine)

      # - name: Set Docker environment variables
      #   run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
        # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        # with:
        #   driver: docker-container
        #   install: true

      - name: Setup PowerShell
        shell: pwsh
        run: |
          $PSVersionTable.PSVersion

      # Run Quota Check Script
      - name: Run Quota Check
        id: quota-check
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"  # Ensure that any error stops the pipeline

          # Path to the PowerShell script for quota check
          $quotaCheckScript = "Deployment/checkquota.ps1"

          # Check if the script exists and is executable (not needed for PowerShell like chmod)
          if (-not (Test-Path $quotaCheckScript)) {
            Write-Host "❌ Error: Quota check script not found."
            exit 1
          }

          # Run the script
          .\Deployment\checkquota.ps1

          # If the script fails, check for the failure message
          $quotaFailedMessage = "No region with sufficient quota found"
          $output = Get-Content "Deployment/checkquota.ps1"

          if ($output -contains $quotaFailedMessage) {
            echo "QUOTA_FAILED=true" >> $GITHUB_ENV
          }
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          GPT_MIN_CAPACITY: ${{ env.GPT_CAPACITY }}
          TEXT_EMBEDDING_MIN_CAPACITY: ${{ env.TEXT_EMBEDDING_CAPACITY }}
          AZURE_REGIONS: "${{ vars.AZURE_REGIONS }}"

      # Send Notification on Quota Failure
      - name: Send Notification on Quota Failure
        if: env.QUOTA_FAILED == 'true'
        shell: pwsh
        run: |
          $RUN_URL = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Construct the email body
          $EMAIL_BODY = @"
          {
            "body": "<p>Dear Team,</p><p>The quota check has failed, and the pipeline cannot proceed.</p><p><strong>Build URL:</strong> <a href='$RUN_URL'>$RUN_URL</a></p><p>Please take necessary action.</p><p>Best regards,<br>Your Automation Team</p>"
          }
          "@

          # Send the notification
          try {
            $response = Invoke-RestMethod -Uri "${{ secrets.LOGIC_APP_URL }}" -Method Post -ContentType "application/json" -Body $EMAIL_BODY
            Write-Host "Notification sent successfully."
          } catch {
            Write-Host "❌ Failed to send notification."
          }

      - name: Fail Pipeline if Quota Check Fails
        if: env.QUOTA_FAILED == 'true'
        run: exit 1
        
      - name: Generate Environment Name
        id: generate_environment_name
        shell: bash
        run: |
          set -e
          TIMESTAMP_SHORT=$(date +%s | tail -c 5)    # Last 4-5 digits of epoch seconds
          RANDOM_SUFFIX=$(head /dev/urandom | tr -dc 'a-z0-9' | head -c 8)  # 8 random alphanum chars
          UNIQUE_ENV_NAME="${TIMESTAMP_SHORT}${RANDOM_SUFFIX}"    # Usually ~12-13 chars
          echo "ENVIRONMENT_NAME=${UNIQUE_ENV_NAME}" >> $GITHUB_ENV
          echo "Generated ENVIRONMENT_NAME: ${UNIQUE_ENV_NAME}"

      - name: Run Deployment Script with Input
        id: run_deployment_script
        shell: pwsh
        run: |
          cd Deployment
          $input = @"
          ${{ secrets.AZURE_TENANT_ID }}
          ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ${{ env.ENVIRONMENT_NAME }}

          CanadaCentral
          ${{ env.VALID_REGION }}
          ${{ secrets.EMAIL }}
          yes
          "@
          $input | pwsh ./resourcedeployment.ps1
          $rg_name = "${{ env.rg_name }}"
          $krg_name = "${{ env.krg_name }}"
          $solution_prefix = "${{ env.SOLUTION_PREFIX }}"
          Write-Host "Resource Group Name is $rg_name"
          Write-Host "Kubernetes resource group are $krg_name"
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Extract Web App URL and Increase TPM
        id: get_webapp_url
        shell: bash
        run: |
          # Save the resource group name and Kubernetes resource group name to GITHUB_OUTPUT
          echo "RESOURCE_GROUP_NAME=${{ env.rg_name }}" >> $GITHUB_OUTPUT
          echo "KUBERNETES_RESOURCE_GROUP_NAME=${{ env.krg_name }}" >> $GITHUB_OUTPUT
          echo "SOLUTION_PREFIX=${{ env.SOLUTION_PREFIX }}" >> $GITHUB_OUTPUT

          if az account show &> /dev/null; then
            echo "Azure CLI is authenticated."
          else
            az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          fi
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          # Get the Web App URL
          public_ip_name=$(az network public-ip list --resource-group ${{ env.krg_name }} --query "[?contains(name, 'kubernetes-')].name" -o tsv)
          fqdn=$(az network public-ip show --resource-group ${{ env.krg_name }} --name $public_ip_name --query "dnsSettings.fqdn" -o tsv)
          if [ -n "$fqdn" ]; then
            echo "WEBAPP_URL=https://$fqdn" >> $GITHUB_OUTPUT
            echo "Web App URL is https://$fqdn"
          else
            echo "Failed to retrieve Web App URL."
            exit 1
          fi

          # Increase the TPM for the Azure OpenAI models
          solutionPrefix="${{ env.SOLUTION_PREFIX }}"
          openai_name="oai-$solutionPrefix"
          openai_gpt_deployment_url="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.rg_name }}/providers/Microsoft.CognitiveServices/accounts/$openai_name/deployments/gpt-4o-mini?api-version=2023-05-01"
          az rest -m put -u "$openai_gpt_deployment_url" -b "{'sku':{'name':'Standard','capacity':${{ env.GPT_CAPACITY }}},'properties': {'model': {'format': 'OpenAI','name': 'gpt-4o-mini','version': '2024-07-18'}}}"
          if [ $? -ne 0 ]; then
            echo "Failed to increase TPM for GPT deployment."
            exit 1
          else
            echo "Successfully increased TPM for GPT deployment."
          fi
          openai_embedding_deployment_url="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.rg_name }}/providers/Microsoft.CognitiveServices/accounts/$openai_name/deployments/text-embedding-large?api-version=2023-05-01"
          az rest -m put -u "$openai_embedding_deployment_url" -b "{'sku':{'name':'Standard','capacity': ${{ env.TEXT_EMBEDDING_CAPACITY }}},'properties': {'model': {'format': 'OpenAI','name': 'text-embedding-3-large','version': '1'}}}"
          if [ $? -ne 0 ]; then
            echo "Failed to increase TPM for Text Embedding deployment."
            exit 1
          else
            echo "Successfully increased TPM for Text Embedding deployment."
          fi
          
      - name: Run Post Deployment Script
        shell: pwsh
        run: |
          cd Deployment
          .\uploadfiles.ps1 -EndpointUrl "${{ steps.get_webapp_url.outputs.WEBAPP_URL }}"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ Post deployment script failed."
            exit 1
          } else {
            Write-Host "✅ Post deployment script completed successfully."
          }

      - name: Logout from Azure
        if: always()
        shell: pwsh
        run: |
          az logout
          Write-Host "Logged out from Azure successfully."


  e2e-test:
    needs: deploy
    uses: ./.github/workflows/test-automation.yml
    with:
      DKM_URL: ${{ needs.deploy.outputs.WEBAPP_URL }}
    secrets: inherit


  cleanup-deployment:
    if: always()
    needs: [deploy, e2e-test]
    runs-on: windows-latest
    env:
      RESOURCE_GROUP_NAME: ${{ needs.deploy.outputs.RESOURCE_GROUP_NAME }}
      KUBERNETES_RESOURCE_GROUP_NAME: ${{ needs.deploy.outputs.KUBERNETES_RESOURCE_GROUP_NAME }}
      SOLUTION_PREFIX: ${{ needs.deploy.outputs.SOLUTION_PREFIX }}

    steps:

      - name: Install Azure CLI
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
          Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet' -Wait

      - name: Login to Azure
        shell: pwsh
        run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Cleanup Resource Group
        id: cleanup_resource_group
        if: always() && needs.deploy.outputs.RESOURCE_GROUP_NAME != '' # Ensures this step runs even if the deployment fails
        shell: pwsh
        run: |
          az group delete --name ${{ env.RESOURCE_GROUP_NAME }} --yes --no-wait
          az group delete --name ${{ env.KUBERNETES_RESOURCE_GROUP_NAME }} --yes --no-wait

      - name: Wait for Resource Deletion to Complete
        if: steps.cleanup_resource_group.outcome == 'success'
        shell: pwsh
        run: |
          $retries = 0
          $maxRetries = 3
          $sleepIntervals = @(700, 200, 200)

          while ($retries -lt $maxRetries) {
            $rgStatus = az group exists --name ${{ env.RESOURCE_GROUP_NAME }}
            $krgStatus = az group exists --name ${{ env.KUBERNETES_RESOURCE_GROUP_NAME }}

            # if (-not $rgStatus -and -not $krgStatus) {
            #   Write-Host "Both resource groups deleted successfully."
            #   break
            # }
            if ($rgStatus -eq "false" -and $krgStatus -eq "false") {
              Write-Host "Both resource groups deleted successfully."
              break
            }

            $retries++
            if ($retries -eq $maxRetries) {
              Write-Host "Resource groups deletion not confirmed after $maxRetries attempts. Exiting."
              exit 1
            }

            Write-Host "Resource groups still exist. Retrying in $($sleepIntervals[$retries - 1]) seconds..."
            Start-Sleep -Seconds $sleepIntervals[$retries - 1]
          }

      - name: Purging the Resources
        if: success()
        shell: pwsh
        run: |
          # Set variables using GitHub Actions environment values
          $solutionPrefix = "${{ env.SOLUTION_PREFIX }}"
          $subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          $resourceGroupName = "${{ env.RESOURCE_GROUP_NAME }}"

          $openai_name = "oai-$solutionPrefix"
          $cognitiveservice_name = "di-$solutionPrefix"

          # Debug: Print resource names
          Write-Host "Purging OpenAI resource: $openai_name"
          Write-Host "Purging CognitiveService Account: $cognitiveservice_name"

          # Construct resource IDs
          $openaiResourceId = "/subscriptions/$subscriptionId/providers/Microsoft.CognitiveServices/locations/${{ env.VALID_REGION }}/resourceGroups/$resourceGroupName/deletedAccounts/$openai_name"
          $cognitiveResourceId = "/subscriptions/$subscriptionId/providers/Microsoft.CognitiveServices/locations/${{ env.VALID_REGION }}/resourceGroups/$resourceGroupName/deletedAccounts/$cognitiveservice_name"

          # Debug: Print constructed resource IDs
          Write-Host "Command to purge OpenAI resource: az resource delete --ids `"$openaiResourceId`" --verbose"
          Write-Host "Command to purge CognitiveService Account: az resource delete --ids `"$cognitiveResourceId`" --verbose"
            # Purge OpenAI Resource
              az resource delete --ids $openaiResourceId --verbose
              if (-not $?) {
                  Write-Host "Failed to purge OpenAI resource: $openaiResourceId"
              }

              # Purge CognitiveService Account


              az resource delete --ids $cognitiveResourceId --verbose
              if (-not $?) {
                  Write-Host "Failed to purge CognitiveService Account."
              }

      # - name: Send Notification on Failure
      #   if: failure() || needs.deploy.result == 'failure'
      #   shell: pwsh
      #   run: |
      #     # Define the RUN_URL variable
      #     $RUN_URL = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      #     # Construct the email body using a Here-String
      #     $EMAIL_BODY = @"
      #     {
      #       "body": "<p>Dear Team,</p><p>The Document Knowledge Mining Automation process encountered an issue.</p><p><strong>Build URL:</strong> <a href='$RUN_URL'>$RUN_URL</a></p><p>Please investigate promptly.</p><p>Best regards,<br>Your Automation Team</p>"
      #     }
      #     "@

      #     # Send the notification with error handling
      #     try {
      #         curl -X POST "${{ secrets.LOGIC_APP_URL }}" `
      #              -H "Content-Type: application/json" `
      #              -d "$EMAIL_BODY"
      #     } catch {
      #         Write-Output "Failed to send notification."
      #     }

      - name: Logout from Azure
        if: always()
        shell: pwsh
        run: |
          az logout
          Write-Host "Logged out from Azure successfully."
